function [methodinfo,structs,enuminfo,ThunkLibName]=TMSiSDK32
%TMSISDK32 Create structures to define interfaces found in 'TMSiSDK'.

%This function was generated by loadlibrary.m parser version 1.1.6.24 on Thu Apr  7 11:30:11 2016
%perl options:'TMSiSDK.i -outfile=TMSiSDK32.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% BOOLEAN _stdcall SetRtcTime ( HANDLE Handle , SYSTEMTIME * InTime ); 
fcns.name{fcnNum}='SetRtcTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 's_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall GetRtcTime ( HANDLE Handle , SYSTEMTIME * InTime ); 
fcns.name{fcnNum}='GetRtcTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 's_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall SetRtcAlarmTime ( HANDLE Handle , SYSTEMTIME * InTime , BOOLEAN AlarmOnOff ); 
fcns.name{fcnNum}='SetRtcAlarmTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 's_SYSTEMTIMEPtr', 'uint8'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall GetRtcAlarmTime ( HANDLE Handle , SYSTEMTIME * InTime , BOOLEAN * AlarmOnOff ); 
fcns.name{fcnNum}='GetRtcAlarmTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 's_SYSTEMTIMEPtr', 'uint8Ptr'};fcnNum=fcnNum+1;
% int _stdcall TMSISendDataBlock ( HANDLE Handle , int KeyCode , unsigned short BlockType , unsigned short NrOfShorts , const short * const InBuffer , unsigned short ExpectedBlockType ); 
fcns.name{fcnNum}='TMSISendDataBlock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint16', 'uint16', 'int16Ptr', 'uint16'};fcnNum=fcnNum+1;
% HANDLE _stdcall LibraryInit ( TMSiConnectionType GivenConnectionType , int * ErrorCode ); 
fcns.name{fcnNum}='LibraryInit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'TMSiConnectionEnum', 'int32Ptr'};fcnNum=fcnNum+1;
% int _stdcall LibraryExit ( HANDLE Handle ); 
fcns.name{fcnNum}='LibraryExit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall GetFrontEndInfo ( HANDLE Handle , FRONTENDINFO * FrontEndInfo ); 
fcns.name{fcnNum}='GetFrontEndInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 's_FRONTENDINFOPtr'};fcnNum=fcnNum+1;
% int _stdcall GetErrorCode ( HANDLE Handle ) ; 
fcns.name{fcnNum}='GetErrorCode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% const char * _stdcall GetErrorCodeMessage ( HANDLE Handle , int id ); 
fcns.name{fcnNum}='GetErrorCodeMessage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% TMSiFileInfoType * _stdcall GetCardFileList ( void * Handle , int * NrOfFiles ); 
fcns.name{fcnNum}='GetCardFileList'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='TMSiFileInfoPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall OpenCardFile ( void * Handle , unsigned short FileId , TMSiFileHeaderType * FileHeader ); 
fcns.name{fcnNum}='OpenCardFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'uint16', 'TMSiTDFHeaderPtr'};fcnNum=fcnNum+1;
% PSIGNAL_FORMAT _stdcall GetCardFileSignalFormat ( HANDLE Handle ); 
fcns.name{fcnNum}='GetCardFileSignalFormat'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='s_SIGNAL_FORMATPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall SetRecordingConfiguration ( void * Handle , TMSiRecordingConfigType * RecordingConfig , unsigned int * ChannelConfig , unsigned int NrOfChannels ); 
fcns.name{fcnNum}='SetRecordingConfiguration'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'TMSiRecordingConfigPtr', 'uint32Ptr', 'uint32'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall GetRecordingConfiguration ( void * Handle , TMSiRecordingConfigType * RecordingConfig , unsigned int * ChannelConfig , unsigned int * NrOfChannels ); 
fcns.name{fcnNum}='GetRecordingConfiguration'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'TMSiRecordingConfigPtr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall ResetDevice ( HANDLE Handle ); 
fcns.name{fcnNum}='ResetDevice'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall Open ( void * Handle , const char * DeviceLocator ); 
fcns.name{fcnNum}='Open'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall Close ( HANDLE hHandle ); 
fcns.name{fcnNum}='Close'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall Start ( HANDLE Handle ); 
fcns.name{fcnNum}='Start'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall Stop ( HANDLE Handle ); 
fcns.name{fcnNum}='Stop'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall SetSignalBuffer ( HANDLE Handle , PULONG SampleRate , PULONG BufferSize ); 
fcns.name{fcnNum}='SetSignalBuffer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall GetBufferInfo ( HANDLE Handle , PULONG Overflow , PULONG PercentFull ); 
fcns.name{fcnNum}='GetBufferInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% LONG _stdcall GetSamples ( HANDLE Handle , PULONG SampleBuffer , ULONG Size ); 
fcns.name{fcnNum}='GetSamples'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall DeviceFeature ( HANDLE Handle , LPVOID DataIn , DWORD InSize , LPVOID DataOut , DWORD OutSize ); 
fcns.name{fcnNum}='DeviceFeature'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% PSIGNAL_FORMAT _stdcall GetSignalFormat ( HANDLE Handle , char * FrontEndName ); 
fcns.name{fcnNum}='GetSignalFormat'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='s_SIGNAL_FORMATPtr'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall Free ( void * Memory ); 
fcns.name{fcnNum}='Free'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HANDLE _stdcall LibraryInit ( TMSiConnectionType GivenConnectionType , int * ErrorCode ); 
fcns.name{fcnNum}='LibraryInit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'TMSiConnectionEnum', 'int32Ptr'};fcnNum=fcnNum+1;
% int _stdcall LibraryExit ( HANDLE Handle ); 
fcns.name{fcnNum}='LibraryExit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall GetFrontEndInfo ( HANDLE Handle , FRONTENDINFO * FrontEndInfo ); 
fcns.name{fcnNum}='GetFrontEndInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 's_FRONTENDINFOPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall SetRtcTime ( HANDLE Handle , SYSTEMTIME * InTime ); 
fcns.name{fcnNum}='SetRtcTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 's_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% int _stdcall GetErrorCode ( HANDLE Handle ); 
fcns.name{fcnNum}='GetErrorCode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% const char * _stdcall GetErrorCodeMessage ( HANDLE Handle , int ErrorCode ); 
fcns.name{fcnNum}='GetErrorCodeMessage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% char ** _stdcall GetDeviceList ( HANDLE Handle , int * NrOfFrontEnds ); 
fcns.name{fcnNum}='GetDeviceList'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='stringPtrPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% void _stdcall FreeDeviceList ( HANDLE Handle , int NrOfFrontEnds , char ** DeviceList ); 
fcns.name{fcnNum}='FreeDeviceList'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'stringPtrPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall GetConnectionProperties ( HANDLE Handle , int * SignalStrength , unsigned int * NrOfCRCErrors , unsigned int * NrOfSampleBlocks ); 
fcns.name{fcnNum}='GetConnectionProperties'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall StartCardFile ( void * Handle ); 
fcns.name{fcnNum}='StartCardFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall StopCardFile ( void * Handle ); 
fcns.name{fcnNum}='StopCardFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall CloseCardFile ( void * Handle ); 
fcns.name{fcnNum}='CloseCardFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% LONG _stdcall GetCardFileSamples ( HANDLE Handle , PULONG SampleBuffer , ULONG SampleBufferSizeInBytes ); 
fcns.name{fcnNum}='GetCardFileSamples'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall SetRefCalculation ( HANDLE Handle , int OnOrOff ); 
fcns.name{fcnNum}='SetRefCalculation'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall SetMeasuringMode ( HANDLE Handle , ULONG Mode , int Value ); 
fcns.name{fcnNum}='SetMeasuringMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'int32'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall GetExtFrontEndInfo ( HANDLE Handle , TMSiExtFrontendInfoType * ExtFrontEndInfo , TMSiBatReportType * BatteryReport , TMSiStorageReportType * StorageReport , TMSiDeviceReportType * DeviceReport ); 
fcns.name{fcnNum}='GetExtFrontEndInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'TMSiExtFrontendInfoPtr', 'TMSiBatReportPtr', 'TMSiStorageReportPtr', 'TMSiDeviceReportPtr'};fcnNum=fcnNum+1;
% const char * _stdcall GetRevision ( HANDLE Handle ); 
fcns.name{fcnNum}='GetRevision'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall ConvertSignalFormat ( HANDLE Handle , SIGNAL_FORMAT * psf , unsigned int Index , int * Size , int * Format , int * Type , int * SubType , float * UnitGain , float * UnitOffSet , int * UnitId , int * UnitExponent , char Name [ 40 ] ); 
fcns.name{fcnNum}='ConvertSignalFormat'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 's_SIGNAL_FORMATPtr', 'uint32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'singlePtr', 'singlePtr', 'int32Ptr', 'int32Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% int _stdcall TMSIRawData ( HANDLE Handle , int KeyCode , unsigned short NrOfShortsIn , const short * const InBuffer , unsigned short ExpectedBlockType , unsigned short * NrOfShortsOut , short * OutBuffer ); 
fcns.name{fcnNum}='TMSIRawData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint16', 'int16Ptr', 'uint16', 'uint16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall GetRandomKey ( void * Handle , char * Key , unsigned int * LengthKeyInBytes ); 
fcns.name{fcnNum}='GetRandomKey'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall UnlockFrontEnd ( void * Handle , char * Key , unsigned int * LengthKeyInBytes ); 
fcns.name{fcnNum}='UnlockFrontEnd'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall GetOEMSize ( void * Handle , unsigned int * LengthInBytes ); 
fcns.name{fcnNum}='GetOEMSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall SetOEMData ( HANDLE Handle , const char * BinaryOEMData , const unsigned int OEMDataLengthInBytes ); 
fcns.name{fcnNum}='SetOEMData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'uint32'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall GetOEMData ( HANDLE Handle , char * BinaryOEMData , unsigned int * OEMDataLengthInBytes ); 
fcns.name{fcnNum}='GetOEMData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall OpenFirstDevice ( HANDLE Handle ); 
fcns.name{fcnNum}='OpenFirstDevice'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall SetStorageMode ( HANDLE Handle , int OnOrOff ); 
fcns.name{fcnNum}='SetStorageMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall GetDigSensorData ( void * Handle , unsigned int * DataSize , unsigned char * SensorData ); 
fcns.name{fcnNum}='GetDigSensorData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall SetDigSensorData ( void * Handle , unsigned int GivenDataSizeInBytes , unsigned char * GivenSensorData ); 
fcns.name{fcnNum}='SetDigSensorData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall GetFlashStatus ( HANDLE Handle , long * Status ); 
fcns.name{fcnNum}='GetFlashStatus'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'longPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall StartFlashData ( void * Handle , unsigned int StartAdress , unsigned int Length ); 
fcns.name{fcnNum}='StartFlashData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% LONG _stdcall GetFlashSamples ( HANDLE Handle , PULONG SampleBuffer , ULONG SampleBufferSizeInBytes ); 
fcns.name{fcnNum}='GetFlashSamples'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall StopFlashData ( void * Handle ); 
fcns.name{fcnNum}='StopFlashData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall FlashEraseMemory ( HANDLE Handle ); 
fcns.name{fcnNum}='FlashEraseMemory'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall SetFlashData ( HANDLE Handle , unsigned int StartAdressInBytes , PULONG FlashData , int FlashBlockLengthInWords ); 
fcns.name{fcnNum}='SetFlashData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'ulongPtr', 'int32'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall SetChannelReferenceSwitch ( void * Handle , unsigned int GivenDataSizeInBytes , unsigned char * GivenChannelSwitchData ); 
fcns.name{fcnNum}='SetChannelReferenceSwitch'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
% BOOLEAN _stdcall TMSIGetRawIdData ( HANDLE Handle , int KeyCode , unsigned short * NrOfShortsOut , short * OutBuffer ); 
fcns.name{fcnNum}='TMSIGetRawIdData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
structs.s_SYSTEMTIME.packing=1;
structs.s_SYSTEMTIME.members=struct('wYear', 'uint16', 'wMonth', 'uint16', 'wDayOfWeek', 'uint16', 'wDay', 'uint16', 'wHour', 'uint16', 'wMinute', 'uint16', 'wSecond', 'uint16', 'wMilliseconds', 'uint16');
structs.s_SIGNAL_FORMAT.members=struct('Size', 'ulong', 'Elements', 'ulong', 'Type', 'ulong', 'SubType', 'ulong', 'Format', 'ulong', 'Bytes', 'ulong', 'UnitGain', 'single', 'UnitOffSet', 'single', 'UnitId', 'ulong', 'UnitExponent', 'long', 'Name', 'uint16#40', 'Port', 'ulong', 'PortName', 'uint16#40', 'SerialNumber', 'ulong');
structs.s_FRONTENDINFO.members=struct('NrOfChannels', 'uint16', 'SampleRateSetting', 'uint16', 'Mode', 'uint16', 'maxRS232', 'uint16', 'Serial', 'ulong', 'NrExg', 'uint16', 'NrAux', 'uint16', 'HwVersion', 'uint16', 'SwVersion', 'uint16', 'RecBufSize', 'uint16', 'SendBufSize', 'uint16', 'NrOfSwChannels', 'uint16', 'BaseSf', 'uint16', 'Power', 'uint16', 'Check', 'uint16');
structs.s_FeatureData.members=struct('Id', 'ulong', 'Info', 'ulong');
structs.TMSiFileInfo.members=struct('FileID', 'uint16', 'StartRecTime', 's_SYSTEMTIME', 'StopRecTime', 's_SYSTEMTIME');
structs.TMSiTDFHeader.members=struct('NumberOfSamp', 'uint32', 'StartRecTime', 's_SYSTEMTIME', 'EndRecTime', 's_SYSTEMTIME', 'FrontEndSN', 'uint32', 'FrontEndAdpSN', 'uint32', 'FrontEndHWVer', 'uint16', 'FrontEndSWVer', 'uint16', 'FrontEndAdpHWVer', 'uint16', 'FrontEndAdpSWVer', 'uint16', 'RecordingSampleRate', 'uint16', 'PatientID', 'int8#128', 'UserString1', 'int8#64');
structs.TMSiRecordingConfig.members=struct('StorageType', 'uint16', 'RecordingSampleRate', 'uint16', 'NumberOfChan', 'uint16', 'StartControl', 'uint32', 'EndControl', 'uint32', 'CardStatus', 'uint32', 'MeasureFileName', 'int8#32', 'AlarmTimeStart', 's_SYSTEMTIME', 'AlarmTimeStop', 's_SYSTEMTIME', 'AlarmTimeInterval', 's_SYSTEMTIME', 'AlarmTimeCount', 'uint32', 'FrontEndSN', 'uint32', 'FrontEndAdpSN', 'uint32', 'RecordCondition', 'uint32', 'RFInterfStartTime', 's_SYSTEMTIME', 'RFInterfStopTime', 's_SYSTEMTIME', 'RFInterfInterval', 's_SYSTEMTIME', 'RFInterfCount', 'uint32', 'PatientID', 'int8#128', 'UserString1', 'int8#64');
structs.TMSiBatReport.members=struct('Temp', 'int16', 'Voltage', 'int16', 'Current', 'int16', 'AccumCurrent', 'int16', 'AvailableCapacityInPercent', 'int16', 'DoNotUse1', 'uint16', 'DoNotUse2', 'uint16', 'DoNotUse3', 'uint16', 'DoNotUse4', 'uint16');
structs.TMSiStorageReport.members=struct('StructSize', 'uint32', 'TotalSize', 'uint32', 'UsedSpace', 'uint32', 'SDCardCID', 'uint32#4', 'DoNotUse1', 'uint16', 'DoNotUse2', 'uint16', 'DoNotUse3', 'uint16', 'DoNotUse4', 'uint16');
structs.TMSiDeviceReport.members=struct('AdapterSN', 'uint32', 'AdapterStatus', 'uint32', 'AdapterCycles', 'uint32', 'MobitaSN', 'uint32', 'MobitaStatus', 'uint32', 'MobitaCycles', 'uint32', 'DoNotUse1', 'uint16', 'DoNotUse2', 'uint16', 'DoNotUse3', 'uint16', 'DoNotUse4', 'uint16');
structs.TMSiExtFrontendInfo.members=struct('CurrentSamplerate', 'uint16', 'CurrentInterface', 'uint16', 'CurrentBlockType', 'uint16', 'DoNotUse1', 'uint16', 'DoNotUse2', 'uint16', 'DoNotUse3', 'uint16', 'DoNotUse4', 'uint16');
enuminfo.TMSiStartControl=struct('sc_man_shutdown_enable',256,'sc_rf_recurring',128,'sc_rf_timed_start',64,'sc_rf_auto_start',32,'sc_alarm_recurring',16,'sc_power_on_record_auto_start',8,'sc_man_record_enable',4,'sc_alarm_record_auto_start',2,'sc_rtc_set',1);
enuminfo.TMSiConnectionEnum=struct('TMSiConnectionUndefined',0,'TMSiConnectionFiber',1,'TMSiConnectionBluetooth',2,'TMSiConnectionUSB',3,'TMSiConnectionWifi',4,'TMSiConnectionNetwork',5);
enuminfo.TmsiErrorCodeEnum=struct('TMSiErrorCodeUnsuccessfull',256,'TMSiErrorCodeInvalidHandle',257,'TMSiErrorCodeNotImplemented',258);
methodinfo=fcns;